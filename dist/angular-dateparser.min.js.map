{"version":3,"sources":["DateParser.ts","DateParserDirective.ts"],"names":["NgDateParser","DateParser","_this","this","$get","$filter","$locale","$rootScope","$dateFilter","updateFromLocale","_watchLocale","$watchCollection","parse","val","format","angular","isDate","isString","length","Date","datetimeFormats","now","i_val","i_format","format_token","year","week","month","date","hh","mm","ss","sss","ampm","z","parsedZ","getFullYear","getMonth","charAt","token","minLength","maxLength","getInteger","Math","max","toString","i","monthNames","month_name","substring","toLowerCase","j","dayNames","day_name","tzStr","parseInt","substr","localDate","getDate","dateFromISOWeek","getDateOfISOWeek","setMonth","setDate","setHours","setMinutes","setSeconds","setMilliseconds","getTime","getTimezoneOffset","e","console","info","cache","$inject","prototype","DATETIME_FORMATS","MONTH","concat","SHORTMONTH","DAY","SHORTDAY","watchLocale","watch","isDefined","input","startPoint","key","matcher","RegExp","match","exec","Number","simple","dow","getDay","ISOweekStart","isoWeekDate","module","provider","DateParserDirective","dateFilter","$dateParser","restrict","require","scope","ngModel","link","$scope","element","attrs","dateFormat","$observe","value","$render","oldValue","equals","$parsers","unshift","viewValue","$setValidity","modelValueExists","$modelValue","undefined","$formatters","push","modelValue","factory","directive"],"mappings":"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","file":"angular-dateparser.min.js","sourcesContent":["///<reference path=\"../all.d.ts\"/>\r\n\r\nmodule NgDateParser {\r\n    export interface IDateParser {\r\n        (val: any, format?: string): Date;\r\n    }\r\n\r\n    class DateParser implements ng.IServiceProvider {\r\n        'use strict';\r\n\r\n        private $dateFilter: ng.IFilterDate;\r\n        private $locale: ng.ILocaleService;\r\n        private datetimeFormats: ng.ILocaleDateTimeFormatDescriptor;\r\n        private monthNames: string[];\r\n        private dayNames: string[];\r\n        private cache: string[];\r\n        private _watchLocale: boolean;\r\n\r\n        constructor() {\r\n            // Regex pattern cache\r\n            this.cache = [];\r\n            this._watchLocale = false;\r\n            this.$get.$inject = ['$filter', '$locale', '$rootScope'];\r\n        }\r\n\r\n        updateFromLocale() {\r\n            this.datetimeFormats = this.$locale.DATETIME_FORMATS;\r\n            this.monthNames = this.datetimeFormats.MONTH.concat(this.datetimeFormats.SHORTMONTH);\r\n            this.dayNames = this.datetimeFormats.DAY.concat(this.datetimeFormats.SHORTDAY);\r\n        }\r\n\r\n        watchLocale(watch?: boolean) {\r\n            if (angular.isDefined(watch)) {\r\n                this._watchLocale = watch;\r\n            } else {\r\n                return this._watchLocale;\r\n            }\r\n        }\r\n\r\n        $get = ($filter: ng.IFilterService, $locale: ng.ILocaleService, $rootScope: ng.IRootScopeService) => {\r\n            this.$locale = $locale;\r\n            this.$dateFilter = $filter('date');\r\n\r\n            this.updateFromLocale();\r\n\r\n            if (this._watchLocale) {\r\n                $rootScope.$watchCollection(() => $locale, () => {\r\n                    this.updateFromLocale();\r\n                });\r\n            }\r\n\r\n            return this.parse;\r\n        }\r\n\r\n        private parse: IDateParser = (val: any, format?: string): Date => {\r\n            // if it's a Date object, return as-is\r\n            if (angular.isDate(val)) {\r\n                return val;\r\n            }\r\n\r\n            // if it's anything other than a string, reject it\r\n            if (!angular.isString(val)) {\r\n                return undefined;\r\n            }\r\n\r\n            try {\r\n                // If no format is provided, just pass it to the Date constructor\r\n                if (!format.length) {\r\n                    return new Date(val);\r\n                }\r\n\r\n                // Check if format exists in the format collection\r\n                if (this.datetimeFormats != null && this.datetimeFormats[format]) {\r\n                    format = this.datetimeFormats[format];\r\n                }\r\n\r\n                // Initial values\r\n                var now = new Date(),\r\n                    i_val = 0,\r\n                    i_format = 0,\r\n                    format_token = '',\r\n                    year = null,\r\n                    week = null,\r\n                    month = null,\r\n                    date = null,\r\n                    hh = 0,\r\n                    mm = 0,\r\n                    ss = 0,\r\n                    sss = 0,\r\n                    ampm = 'am',\r\n                    z = 0,\r\n                    parsedZ = false;\r\n                \r\n                // FIX: don't take the current date, it could have a day of the month that is higher than the parsed date\r\n                // example: parse \"February 2013\" with the current date of \"30 April 2013\"\r\n                now = new Date(now.getFullYear(), now.getMonth(), 1);\r\n\r\n                // TODO: Extract this into a helper function perhaps?\r\n                while (i_format < format.length) {\r\n                    // Get next token from format string\r\n                    format_token = format.charAt(i_format);\r\n\r\n                    var token = '';\r\n\r\n                    // TODO: Handle double single quotes\r\n                    // Handle quote marks for strings within format string\r\n                    if (format.charAt(i_format) === \"'\") {\r\n                        var _i_format = i_format;\r\n\r\n                        while ((format.charAt(++i_format) !== \"'\") && (i_format < format.length)) {\r\n                            token += format.charAt(i_format);\r\n                        }\r\n\r\n                        if (val.substring(i_val, i_val + token.length) !== token) {\r\n                            throw 'Pattern value mismatch';\r\n                        }\r\n\r\n                        i_val += token.length;\r\n                        i_format++;\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    while ((format.charAt(i_format) === format_token) && (i_format < format.length)) {\r\n                        token += format.charAt(i_format++);\r\n                    }\r\n\r\n                    // Extract contents of value based on format token\r\n                    if (token === 'yyyy' || token === 'yy' || token === 'y') {\r\n                        var minLength, maxLength;\r\n\r\n                        if (token === 'yyyy') {\r\n                            minLength = 4;\r\n                            maxLength = 4;\r\n                        }\r\n\r\n                        if (token === 'yy') {\r\n                            minLength = 2;\r\n                            maxLength = 2;\r\n                        }\r\n\r\n                        if (token === 'y') {\r\n                            minLength = 2;\r\n                            maxLength = 4;\r\n                        }\r\n\r\n                        year = this.getInteger(val, i_val, minLength, maxLength);\r\n\r\n                        if (year === null) {\r\n                            throw 'Invalid year';\r\n                        }\r\n\r\n                        i_val += Math.max(year.toString().length, token.length);\r\n\r\n                        if (year.toString().length === 2) {\r\n                            if (year > 70) {\r\n                                year = 1900 + (year - 0);\r\n                            } else {\r\n                                year = 2000 + (year - 0);\r\n                            }\r\n                        }\r\n                    } else if (token === 'ww' || token === 'w') {\r\n                        week = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        i_val += Math.max(week.toString().length, token.length);\r\n                    } else if (token === 'MMMM' || token === 'MMM') {\r\n                        month = 0;\r\n\r\n                        for (var i = 0; i < this.monthNames.length; i++) {\r\n                            var month_name = this.monthNames[i];\r\n\r\n                            if (val.substring(i_val, i_val + month_name.length).toLowerCase() === month_name.toLowerCase()) {\r\n                                month = i + 1;\r\n                                if (month > 12) {\r\n                                    month -= 12;\r\n                                }\r\n\r\n                                i_val += month_name.length;\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if ((month < 1) || (month > 12)) {\r\n                            throw 'Invalid month';\r\n                        }\r\n                    } else if (token === 'EEEE' || token === 'EEE') {\r\n                        for (var j = 0; j < this.dayNames.length; j++) {\r\n                            var day_name = this.dayNames[j];\r\n\r\n                            if (val.substring(i_val, i_val + day_name.length).toLowerCase() === day_name.toLowerCase()) {\r\n                                i_val += day_name.length;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else if (token === 'MM' || token === 'M') {\r\n                        month = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (month === null || (month < 1) || (month > 12)) {\r\n                            throw 'Invalid month';\r\n                        }\r\n\r\n                        i_val += Math.max(month.toString().length, token.length);\r\n                    } else if (token === 'dd' || token === 'd') {\r\n                        date = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (date === null || (date < 1) || (date > 31)) {\r\n                            throw 'Invalid date';\r\n                        }\r\n\r\n                        i_val += Math.max(date.toString().length, token.length);\r\n                    } else if (token === 'HH' || token === 'H') {\r\n                        hh = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (hh === null || (hh < 0) || (hh > 23)) {\r\n                            throw 'Invalid hours';\r\n                        }\r\n\r\n                        i_val += Math.max(hh.toString().length, token.length);\r\n                    } else if (token === 'hh' || token === 'h') {\r\n                        hh = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (hh === null || (hh < 1) || (hh > 12)) {\r\n                            throw 'Invalid hours';\r\n                        }\r\n\r\n                        i_val += Math.max(hh.toString().length, token.length);\r\n                    } else if (token === 'mm' || token === 'm') {\r\n                        mm = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (mm === null || (mm < 0) || (mm > 59)) {\r\n                            throw 'Invalid minutes';\r\n                        }\r\n\r\n                        i_val += Math.max(mm.toString().length, token.length);\r\n                    } else if (token === 'ss' || token === 's') {\r\n                        ss = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (ss === null || (ss < 0) || (ss > 59)) {\r\n                            throw 'Invalid seconds';\r\n                        }\r\n\r\n                        i_val += Math.max(ss.toString().length, token.length);\r\n                    } else if (token === 'sss') {\r\n                        sss = this.getInteger(val, i_val, 3, 3);\r\n\r\n                        if (sss === null || (sss < 0) || (sss > 999)) {\r\n                            throw 'Invalid milliseconds';\r\n                        }\r\n\r\n                        i_val += 3;\r\n                    } else if (token === 'a') {\r\n                        if (val.substring(i_val, i_val + 2).toLowerCase() === 'am') {\r\n                            ampm = 'AM';\r\n                        } else if (val.substring(i_val, i_val + 2).toLowerCase() === 'pm') {\r\n                            ampm = 'PM';\r\n                        } else {\r\n                            throw 'Invalid AM/PM';\r\n                        }\r\n\r\n                        i_val += 2;\r\n                    } else if (token === 'Z') {\r\n                        parsedZ = true;\r\n\r\n                        if (val[i_val] === 'Z') {\r\n                            z = 0;\r\n\r\n                            i_val += 1;\r\n                        } else {\r\n                            if (val[i_val + 3] === ':') {\r\n                                var tzStr = val.substring(i_val, i_val + 6);\r\n\r\n                                z = (parseInt(tzStr.substr(0, 3), 10) * 60) + parseInt(tzStr.substr(4, 2), 10);\r\n\r\n                                i_val += 6;\r\n                            } else {\r\n                                var tzStr = val.substring(i_val, i_val + 5);\r\n\r\n                                z = (parseInt(tzStr.substr(0, 3), 10) * 60) + parseInt(tzStr.substr(3, 2), 10);\r\n\r\n                                i_val += 5;\r\n                            }\r\n                        }\r\n\r\n                        if (z > 720 || z < -720) {\r\n                            throw 'Invalid timezone';\r\n                        }\r\n                    } else {\r\n                        if (val.substring(i_val, i_val + token.length) !== token) {\r\n                            throw 'Pattern value mismatch';\r\n                        } else {\r\n                            i_val += token.length;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If there are any trailing characters left in the value, it doesn't match\r\n                if (i_val !== val.length) {\r\n                    throw 'Pattern value mismatch';\r\n                }\r\n\r\n                // Is date valid for month?\r\n                if (month === 2) {\r\n                    // Check for leap year\r\n                    if (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) { // leap year\r\n                        if (date > 29) {\r\n                            throw 'Invalid date';\r\n                        }\r\n                    } else {\r\n                        if (date > 28) {\r\n                            throw 'Invalid date';\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if ((month === 4) || (month === 6) || (month === 9) || (month === 11)) {\r\n                    if (date > 30) {\r\n                        throw 'Invalid date';\r\n                    }\r\n                }\r\n\r\n                // Correct hours value\r\n                if (hh < 12 && ampm === 'PM') {\r\n                    hh += 12;\r\n                } else if (hh > 11 && ampm === 'AM') {\r\n                    hh -= 12;\r\n                }\r\n\r\n                var localDate = new Date(year || now.getFullYear(), (month !== null ? month - 1 : now.getMonth()), date || now.getDate(), hh, mm, ss, sss);\r\n                if (week !== null) {\r\n                    var dateFromISOWeek = this.getDateOfISOWeek(week, year || now.getFullYear(), month, date);\r\n                    if (dateFromISOWeek) {\r\n                        if (month !== null) {\r\n                            dateFromISOWeek.setMonth(month - 1);\r\n                        }\r\n                        if (date !== null) {\r\n                            dateFromISOWeek.setDate(date);\r\n                        }\r\n\r\n                        dateFromISOWeek.setHours(hh);\r\n                        dateFromISOWeek.setMinutes(mm);\r\n                        dateFromISOWeek.setSeconds(ss);\r\n                        dateFromISOWeek.setMilliseconds(sss);\r\n\r\n                        localDate = dateFromISOWeek;\r\n                    } else {\r\n                        throw 'Invalid week number or week number/date mismatch';\r\n                    }\r\n                }\r\n\r\n                if (parsedZ) {\r\n                    return new Date(localDate.getTime() - (z + localDate.getTimezoneOffset()) * 60000);\r\n                }\r\n\r\n                return localDate;\r\n            } catch (e) {\r\n                console.info(e);\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        private getInteger(input: string, startPoint: number, minLength: number, maxLength: number): number {\r\n            var val = input.substring(startPoint);\r\n            var key = `${minLength}_${maxLength}`;\r\n            var matcher = this.cache[key];\r\n            if (!matcher) {\r\n                matcher = new RegExp(`^(\\\\d{${minLength},${maxLength}})`);\r\n                this.cache[key] = matcher;\r\n            }\r\n\r\n            var match = matcher.exec(val);\r\n            if (match) {\r\n                return Number(match[1]);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private getDateOfISOWeek(week: number, year: number, month?: number, date?: number): Date {\r\n            if (week < 1) return undefined;\r\n\r\n            var simple = new Date(year, 0, 1 + (week - 1) * 7);\r\n            var dow = simple.getDay();\r\n            var ISOweekStart = simple;\r\n\r\n            if (dow <= 4) {\r\n                ISOweekStart.setDate(simple.getDate() - simple.getDay() + 1);\r\n            } else {\r\n                ISOweekStart.setDate(simple.getDate() + 8 - simple.getDay());\r\n            }\r\n\r\n            if (ISOweekStart.getFullYear() !== year) {\r\n                return undefined;\r\n            }\r\n\r\n            if (month !== null) {\r\n                if (ISOweekStart.getMonth() !== month - 1) {\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            if (date !== null) {\r\n                var isoWeekDate = ISOweekStart.getDate();\r\n                if (date < isoWeekDate && date > isoWeekDate + 6) {\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            return ISOweekStart;\r\n        }\r\n    }\r\n\r\n    angular.module('dateParser', [])\r\n        .provider('$dateParser', DateParser);\r\n}","///<reference path=\"../all.d.ts\"/>\r\n///<reference path=\"DateParser.ts\"/>\r\n\r\nmodule NgDateParser {\r\n    class DateParserDirective implements ng.IDirective {\r\n        'use strict';\r\n\r\n        restrict = 'A';\r\n        require = 'ngModel';\r\n        scope = {\r\n            ngModel: '='\r\n        };\r\n\r\n        constructor(private dateFilter, private $dateParser: IDateParser, private $locale: ng.ILocaleService) { }\r\n\r\n        link: ng.IDirectiveLinkFn = ($scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ngModel: any) => {\r\n            let dateFormat: string;\r\n\r\n            attrs.$observe('dateParser', (value: string) => {\r\n                dateFormat = value;\r\n                ngModel.$render();\r\n            });\r\n\r\n            $scope.$watchCollection(() => this.$locale, (value, oldValue) => {\r\n                if(!angular.equals(value, oldValue)) {\r\n                    ngModel.$render();\r\n                }\r\n            });\r\n\r\n            ngModel.$parsers.unshift((viewValue) => {\r\n                let date = this.$dateParser(viewValue, dateFormat);\r\n\r\n                // Set validity when view value changes\r\n                ngModel.$setValidity('date', !viewValue || angular.isDate(date));\r\n\r\n                return date;\r\n            });\r\n\r\n            ngModel.$render = () => {\r\n                let modelValueExists = ngModel.$modelValue === '' || ngModel.$modelValue === null || ngModel.$modelValue;\r\n                element.val(modelValueExists ? this.dateFilter(ngModel.$modelValue, dateFormat) : undefined);\r\n                this.scope.ngModel = ngModel.$modelValue;\r\n            };\r\n\r\n            // Format the new model value before it is displayed\r\n            ngModel.$formatters.push((modelValue) => {\r\n                // Set validity when model value changes\r\n                ngModel.$setValidity('date', !modelValue || angular.isDate(modelValue));\r\n\r\n                return angular.isDate(modelValue) ? this.dateFilter(modelValue, dateFormat) : '';\r\n            });\r\n        }\r\n\r\n        static factory(): ng.IDirectiveFactory {\r\n            let directive: ng.IDirectiveFactory = (dateFilter, $dateParser, $locale) => new DateParserDirective(dateFilter, $dateParser, $locale);\r\n            directive.$inject = ['dateFilter', '$dateParser', '$locale'];\r\n            return directive;\r\n        }\r\n    }\r\n\r\n    angular.module('dateParser')\r\n        .directive('dateParser', DateParserDirective.factory());\r\n}"],"sourceRoot":"/source/"}