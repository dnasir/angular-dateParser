{"version":3,"sources":["angular-dateparser.min.js","modules/DateParser.ts","angular-dateparser.ts"],"names":["NgDateParser","DateParser","$locale","this","datetimeFormats","DATETIME_FORMATS","monthNames","MONTH","concat","SHORTMONTH","dayNames","DAY","SHORTDAY","cache","prototype","parse","val","format","angular","isDate","isString","length","Date","now","i_val","i_format","format_token","year","getFullYear","month","getMonth","date","getDate","hh","mm","ss","sss","ampm","z","parsedZ","charAt","token","minLength","maxLength","getInteger","Math","max","toString","i","month_name","substring","toLowerCase","j","day_name","tzStr","parseInt","substr","localDate","getTime","getTimezoneOffset","e","input","startPoint","key","matcher","RegExp","match","exec","Number","module","factory","instance"],"mappings":"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","file":"angular-dateparser.min.js","sourcesContent":[null,"///<reference path=\"../all.d.ts\"/>\r\n\r\nmodule NgDateParser {\r\n    export interface IDateParser {\r\n        parse(val:any, format?: string): Date;\r\n    }\r\n    \r\n    export class DateParser implements IDateParser {\r\n        'use strict';\r\n\r\n        private datetimeFormats: ng.ILocaleDateTimeFormatDescriptor;\r\n        private monthNames: string[];\r\n        private dayNames: string[];\r\n        private cache: string[];\r\n\r\n        constructor(private $locale: ng.ILocaleService) {\r\n            // Fetch date and time formats from $locale service\r\n            this.datetimeFormats = this.$locale.DATETIME_FORMATS;\r\n\r\n            // Build array of month and day names\r\n            this.monthNames = this.datetimeFormats.MONTH.concat(this.datetimeFormats.SHORTMONTH);\r\n            this.dayNames = this.datetimeFormats.DAY.concat(this.datetimeFormats.SHORTDAY);\r\n            \r\n            // Regex pattern cache\r\n            this.cache = [];\r\n        }\r\n        \r\n        parse(val:any, format?: string): Date {\r\n            // if it's a Date object, return as-is\r\n            if (angular.isDate(val)) {\r\n                return val;\r\n            }\r\n            \r\n            // if it's anything other than a string, reject it\r\n            if(!angular.isString(val)){\r\n                return undefined;\r\n            }\r\n\r\n            try {\r\n                // If no format is provided, just pass it to the Date constructor\r\n                if (!format.length) {\r\n                    return new Date(val);\r\n                }\r\n\r\n                // Check if format exists in the format collection\r\n                if (this.datetimeFormats != null && this.datetimeFormats[format]) {\r\n                    format = this.datetimeFormats[format];\r\n                }\r\n\r\n                // Initial values\r\n                var now = new Date(),\r\n                    i_val = 0,\r\n                    i_format = 0,\r\n                    format_token = '',\r\n                    year = now.getFullYear(),\r\n                    month = now.getMonth() + 1,\r\n                    date = now.getDate(),\r\n                    hh = 0,\r\n                    mm = 0,\r\n                    ss = 0,\r\n                    sss = 0,\r\n                    ampm = 'am',\r\n                    z = 0,\r\n                    parsedZ = false;\r\n\r\n                // TODO: Extract this into a helper function perhaps?\r\n                while (i_format < format.length) {\r\n                    // Get next token from format string\r\n                    format_token = format.charAt(i_format);\r\n\r\n                    var token = '';\r\n\r\n                    // TODO: Handle double single quotes\r\n                    // Handle quote marks for strings within format string\r\n                    if (format.charAt(i_format) === \"'\") {\r\n                        var _i_format = i_format;\r\n\r\n                        while ((format.charAt(++i_format) !== \"'\") && (i_format < format.length)) {\r\n                            token += format.charAt(i_format);\r\n                        }\r\n\r\n                        if (val.substring(i_val, i_val + token.length) !== token) {\r\n                            throw 'Pattern value mismatch';\r\n                        }\r\n\r\n                        i_val += token.length;\r\n                        i_format++;\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    while ((format.charAt(i_format) === format_token) && (i_format < format.length)) {\r\n                        token += format.charAt(i_format++);\r\n                    }\r\n\r\n                    // Extract contents of value based on format token\r\n                    if (token === 'yyyy' || token === 'yy' || token === 'y') {\r\n                        var minLength, maxLength;\r\n\r\n                        if (token === 'yyyy') {\r\n                            minLength = 4;\r\n                            maxLength = 4;\r\n                        }\r\n\r\n                        if (token === 'yy') {\r\n                            minLength = 2;\r\n                            maxLength = 2;\r\n                        }\r\n\r\n                        if (token === 'y') {\r\n                            minLength = 2;\r\n                            maxLength = 4;\r\n                        }\r\n\r\n                        year = this.getInteger(val, i_val, minLength, maxLength);\r\n\r\n                        if (year === null) {\r\n                            throw 'Invalid year';\r\n                        }\r\n\r\n                        i_val += Math.max(year.toString().length, token.length);\r\n\r\n                        if (year.toString().length === 2) {\r\n                            if (year > 70) {\r\n                                year = 1900 + (year - 0);\r\n                            } else {\r\n                                year = 2000 + (year - 0);\r\n                            }\r\n                        }\r\n                    } else if (token === 'MMMM' || token === 'MMM') {\r\n                        month = 0;\r\n\r\n                        for (var i = 0; i < this.monthNames.length; i++) {\r\n                            var month_name = this.monthNames[i];\r\n\r\n                            if (val.substring(i_val, i_val + month_name.length).toLowerCase() === month_name.toLowerCase()) {\r\n                                month = i + 1;\r\n                                if (month > 12) {\r\n                                    month -= 12;\r\n                                }\r\n\r\n                                i_val += month_name.length;\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if ((month < 1) || (month > 12)) {\r\n                            throw 'Invalid month';\r\n                        }\r\n                    } else if (token === 'EEEE' || token === 'EEE') {\r\n                        for (var j = 0; j < this.dayNames.length; j++) {\r\n                            var day_name = this.dayNames[j];\r\n\r\n                            if (val.substring(i_val, i_val + day_name.length).toLowerCase() === day_name.toLowerCase()) {\r\n                                i_val += day_name.length;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else if (token === 'MM' || token === 'M') {\r\n                        month = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (month === null || (month < 1) || (month > 12)) {\r\n                            throw 'Invalid month';\r\n                        }\r\n\r\n                        i_val += Math.max(month.toString().length, token.length);\r\n                    } else if (token === 'dd' || token === 'd') {\r\n                        date = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (date === null || (date < 1) || (date > 31)) {\r\n                            throw 'Invalid date';\r\n                        }\r\n\r\n                        i_val += Math.max(date.toString().length, token.length);\r\n                    } else if (token === 'HH' || token === 'H') {\r\n                        hh = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (hh === null || (hh < 0) || (hh > 23)) {\r\n                            throw 'Invalid hours';\r\n                        }\r\n\r\n                        i_val += Math.max(hh.toString().length, token.length);\r\n                    } else if (token === 'hh' || token === 'h') {\r\n                        hh = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (hh === null || (hh < 1) || (hh > 12)) {\r\n                            throw 'Invalid hours';\r\n                        }\r\n\r\n                        i_val += Math.max(hh.toString().length, token.length);\r\n                    } else if (token === 'mm' || token === 'm') {\r\n                        mm = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (mm === null || (mm < 0) || (mm > 59)) {\r\n                            throw 'Invalid minutes';\r\n                        }\r\n\r\n                        i_val += Math.max(mm.toString().length, token.length);\r\n                    } else if (token === 'ss' || token === 's') {\r\n                        ss = this.getInteger(val, i_val, token.length, 2);\r\n\r\n                        if (ss === null || (ss < 0) || (ss > 59)) {\r\n                            throw 'Invalid seconds';\r\n                        }\r\n\r\n                        i_val += Math.max(ss.toString().length, token.length);\r\n                    } else if (token === 'sss') {\r\n                        sss = this.getInteger(val, i_val, 3, 3);\r\n\r\n                        if (sss === null || (sss < 0) || (sss > 999)) {\r\n                            throw 'Invalid milliseconds';\r\n                        }\r\n\r\n                        i_val += 3;\r\n                    } else if (token === 'a') {\r\n                        if (val.substring(i_val, i_val + 2).toLowerCase() === 'am') {\r\n                            ampm = 'AM';\r\n                        } else if (val.substring(i_val, i_val + 2).toLowerCase() === 'pm') {\r\n                            ampm = 'PM';\r\n                        } else {\r\n                            throw 'Invalid AM/PM';\r\n                        }\r\n\r\n                        i_val += 2;\r\n                    } else if (token === 'Z') {\r\n                        parsedZ = true;\r\n\r\n                        if (val[i_val] === 'Z') {\r\n                            z = 0;\r\n\r\n                            i_val += 1;\r\n                        } else {\r\n                            if (val[i_val + 3] === ':') {\r\n                                var tzStr = val.substring(i_val, i_val + 6);\r\n\r\n                                z = (parseInt(tzStr.substr(0, 3), 10) * 60) + parseInt(tzStr.substr(4, 2), 10);\r\n\r\n                                i_val += 6;\r\n                            } else {\r\n                                var tzStr = val.substring(i_val, i_val + 5);\r\n\r\n                                z = (parseInt(tzStr.substr(0, 3), 10) * 60) + parseInt(tzStr.substr(3, 2), 10);\r\n\r\n                                i_val += 5;\r\n                            }\r\n                        }\r\n\r\n                        if (z > 720 || z < -720) {\r\n                            throw 'Invalid timezone';\r\n                        }\r\n                    } else {\r\n                        if (val.substring(i_val, i_val + token.length) !== token) {\r\n                            throw 'Pattern value mismatch';\r\n                        } else {\r\n                            i_val += token.length;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If there are any trailing characters left in the value, it doesn't match\r\n                if (i_val !== val.length) {\r\n                    throw 'Pattern value mismatch';\r\n                }\r\n\r\n                // Is date valid for month?\r\n                if (month === 2) {\r\n                    // Check for leap year\r\n                    if (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) { // leap year\r\n                        if (date > 29) {\r\n                            throw 'Invalid date';\r\n                        }\r\n                    } else {\r\n                        if (date > 28) {\r\n                            throw 'Invalid date';\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if ((month === 4) || (month === 6) || (month === 9) || (month === 11)) {\r\n                    if (date > 30) {\r\n                        throw 'Invalid date';\r\n                    }\r\n                }\r\n\r\n                // Correct hours value\r\n                if (hh < 12 && ampm === 'PM') {\r\n                    hh += 12;\r\n                } else if (hh > 11 && ampm === 'AM') {\r\n                    hh -= 12;\r\n                }\r\n\r\n                var localDate = new Date(year, month - 1, date, hh, mm, ss, sss);\r\n\r\n                if (parsedZ) {\r\n                    return new Date(localDate.getTime() - (z + localDate.getTimezoneOffset()) * 60000);\r\n                }\r\n\r\n                return localDate;\r\n            } catch (e) {\r\n                // do we need to log the error somewhere?\r\n                return undefined;\r\n            }\r\n        }\r\n        \r\n        private getInteger(input: string, startPoint: number, minLength: number, maxLength: number): number {\r\n            var val = input.substring(startPoint);\r\n            var key = `${minLength}_${maxLength}`;\r\n            var matcher = this.cache[key];\r\n            if (!matcher) {\r\n                matcher = new RegExp(`^(\\\\d{${minLength},${maxLength}})`);\r\n                this.cache[key] = matcher;\r\n            }\r\n\r\n            var match = matcher.exec(val);\r\n            if (match) {\r\n                return Number(match[1]);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n}","///<reference path=\"all.d.ts\"/>\r\n\r\nmodule NgDateParser {\r\n    angular.module('dateParser', [])\r\n        .factory('$dateParser', ['$locale', ($locale) => {\r\n            var instance = new DateParser($locale);\r\n            \r\n            return function(val, format) {\r\n                return instance.parse(val, format);\r\n            };\r\n        }]);\r\n}"],"sourceRoot":"/source/"}